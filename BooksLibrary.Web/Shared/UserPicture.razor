@using BooksLibrary.Model.TO;
@using BooksLibrary.Web.Contracts;
@using BooksLibrary.Web.ViewModel;

@inject NavigationManager Navigation;
@inject IAuthContract LoginContract;
@inject AuthStateProvider AuthState;


<div class="user-button">
    <button>
        <AuthorizeView>
            <Authorized>
                @if (AuthState.CurrentUser is not null)
                {
                    <img src="@(AuthState.CurrentUser.Picture ?? "img/user-icon.png")" alt="User picture" />
                }
            </Authorized>

            <NotAuthorized>
                <img src="img/user-icon.png" alt="Generic user picture" />
            </NotAuthorized>
        </AuthorizeView>
    </button>

    <div class="user-dropdown">
        <AuthorizeView>
            <Authorized>
                <ul>
                    <li>
                        <a href="profile">Profile</a>
                    </li>
                    <li>
                        <button @onclick="Logout">Logout</button>
                    </li>
                </ul>
            </Authorized>

            <NotAuthorized>
                <ul>
                    <li>
                        <button @onclick="NavigateToLogin">Login</button>
                    </li>
                </ul>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>


@code {
    private void NavigateToLogin()
    {
        Navigation.NavigateTo("authenticate");
    }

    private async Task Logout()
    {
        await LoginContract.Logout();

        Navigation.NavigateTo("/");
    }
}
